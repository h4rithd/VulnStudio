
import { vulnDbApi } from '@/utils/api';
import { VulnDBItem } from '../types/vulnerability.types';

export const searchVulnerabilities = async (query: string): Promise<VulnDBItem[]> => {
  try {
    if (!query.trim()) {
      return [];
    }

    const result = await vulnDbApi.search(query);
    
    if (result.success && result.data) {
      return result.data.map(item => ({
        id: item.id,
        title: item.title,
        background: item.background,
        details: item.details,
        remediation: item.remediation,
        ref_links: Array.isArray(item.ref_links) 
          ? (item.ref_links as any[]).map(link => typeof link === 'string' ? link : String(link))
          : []
      }));
    }
    
    return [];
  } catch (error) {
    console.error('Error searching vulnerabilities:', error);
    return [];
  }
};

export const getVulnerabilityById = async (id: string): Promise<VulnDBItem | null> => {
  try {
    const result = await vulnDbApi.getById(id);
    
    if (result.success && result.data) {
      return {
        id: result.data.id,
        title: result.data.title,
        background: result.data.background,
        details: result.data.details,
        remediation: result.data.remediation,
        ref_links: Array.isArray(result.data.ref_links) 
          ? (result.data.ref_links as any[]).map(link => typeof link === 'string' ? link : String(link))
          : []
      };
    }
    
    return null;
  } catch (error) {
    console.error('Error fetching vulnerability:', error);
    return null;
  }
};

export const getAllVulnerabilities = async (): Promise<VulnDBItem[]> => {
  try {
    const result = await vulnDbApi.getAll();
    
    if (result.success && result.data) {
      return result.data.map(item => ({
        id: item.id,
        title: item.title,
        background: item.background,
        details: item.details,
        remediation: item.remediation,
        ref_links: Array.isArray(item.ref_links) 
          ? (item.ref_links as any[]).map(link => typeof link === 'string' ? link : String(link))
          : []
      }));
    }
    
    return [];
  } catch (error) {
    console.error('Error fetching all vulnerabilities:', error);
    return [];
  }
};

// Utility functions for search components
export const sanitizeSearchTerm = (term: string): string => {
  return term.replace(/<[^>]*>/g, '').trim();
};

export const applyDropdownStyles = (element: HTMLElement | null) => {
  if (element) {
    element.style.zIndex = '1000';
    element.style.position = 'absolute';
  }
};

// Utility function to format request/response data
export const formatRequestResponse = (data: any): string => {
  if (!data) return '';
  
  if (typeof data === 'string') {
    return data;
  }
  
  if (typeof data === 'object') {
    return JSON.stringify(data, null, 2);
  }
  
  return String(data);
};
