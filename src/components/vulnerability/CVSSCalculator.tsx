import React, { useState, useEffect } from 'react';
import { cn } from '@/lib/utils';

interface CVSSProps {
  initialVector?: string;
  initialScore?: number;
  onVectorChange: (vector: string, score: number) => void;
}

interface CVSSMetric {
  key: string;
  name: string;
  options: {
    key: string;
    name: string;
    value: number;
    description: string;
  }[];
}

const CVSSCalculator: React.FC<CVSSProps> = ({ 
  initialVector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N", 
  initialScore = 0.0,
  onVectorChange 
}) => {
  const [vector, setVector] = useState<string>(initialVector);
  const [score, setScore] = useState<number>(initialScore);
  const [metrics, setMetrics] = useState<{[key: string]: string}>({
    AV: 'N', // Attack Vector
    AC: 'L', // Attack Complexity
    PR: 'N', // Privileges Required
    UI: 'N', // User Interaction
    S: 'U',  // Scope
    C: 'N',  // Confidentiality
    I: 'N',  // Integrity
    A: 'N'   // Availability
  });

  useEffect(() => {
    // Parse initial vector if provided
    if (initialVector && initialVector !== "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N") {
      const parts = initialVector.split('/');
      const newMetrics = { ...metrics };
      
      parts.forEach(part => {
        if (part.includes(':') && !part.startsWith('CVSS')) {
          const [key, value] = part.split(':');
          if (key && value && Object.keys(newMetrics).includes(key)) {
            newMetrics[key] = value;
          }
        }
      });
      
      setMetrics(newMetrics);
    }
  }, [initialVector]);

  useEffect(() => {
    // Build the CVSS vector string
    let newVector = "CVSS:3.1";
    Object.entries(metrics).forEach(([key, value]) => {
      newVector += `/${key}:${value}`;
    });
    
    // Calculate score based on the CVSS 3.1 formula
    // This is a simplified version - real calculation would be more complex
    const calculateScore = () => {
      // Basic weights for each metric
      const weights: {[key: string]: {[value: string]: number}} = {
        AV: { N: 0.85, A: 0.62, L: 0.55, P: 0.2 },
        AC: { L: 0.77, H: 0.44 },
        PR: { N: 0.85, L: 0.62, H: 0.27 },
        UI: { N: 0.85, R: 0.62 },
        S: { U: 1.0, C: 1.08 },
        C: { N: 0, L: 0.22, H: 0.56 },
        I: { N: 0, L: 0.22, H: 0.56 },
        A: { N: 0, L: 0.22, H: 0.56 }
      };
      
      // Impact and exploitability calculations
      const impact = 1 - ((1 - weights.C[metrics.C]) * (1 - weights.I[metrics.I]) * (1 - weights.A[metrics.A]));
      const exploitability = 8.22 * weights.AV[metrics.AV] * weights.AC[metrics.AC] * weights.PR[metrics.PR] * weights.UI[metrics.UI];
      
      // Modified impact for different scopes
      let modifiedImpact = 0;
      if (metrics.S === 'U') {
        modifiedImpact = 6.42 * impact;
      } else {
        modifiedImpact = 7.52 * (impact - 0.029) - 3.25 * Math.pow(impact - 0.02, 15);
      }
      
      // Final score calculation
      let baseScore = 0;
      if (modifiedImpact <= 0) {
        baseScore = 0;
      } else {
        if (metrics.S === 'U') {
          baseScore = Math.min(modifiedImpact + exploitability, 10);
        } else {
          baseScore = Math.min(1.08 * (modifiedImpact + exploitability), 10);
        }
      }
      
      return parseFloat(baseScore.toFixed(1));
    };
    
    const newScore = calculateScore();
    setVector(newVector);
    setScore(newScore);
    onVectorChange(newVector, newScore);
  }, [metrics, onVectorChange]);
  
  const handleMetricChange = (metricKey: string, value: string) => {
    setMetrics({
      ...metrics,
      [metricKey]: value
    });
  };

  const getSeverityLevel = (score: number): string => {
    if (score === 0) return 'None';
    if (score < 4.0) return 'Low';
    if (score < 7.0) return 'Medium';
    if (score < 9.0) return 'High';
    return 'Critical';
  };

  const getSeverityColor = (score: number): string => {
    if (score === 0) return 'bg-[#3c6d9d]';
    if (score < 4.0) return 'bg-[#69b986]';
    if (score < 7.0) return 'bg-[#ea9c6b]';
    if (score < 9.0) return 'bg-[#ee6c6e]';
    return 'bg-[#c161a1]';
  };

  const getSeverityTextColor = (score: number): string => {
    if (score === 0) return 'text-[#3c6d9d]';
    if (score < 4.0) return 'text-[#69b986]';
    if (score < 7.0) return 'text-[#ea9c6b]';
    if (score < 9.0) return 'text-[#ee6c6e]';
    return 'text-[#c161a1]';
  };

  const getSeverityThemeColor = (score: number): string => {
    if (score === 0) return '#3c6d9d'; // info
    if (score < 4.0) return '#69b986'; // low
    if (score < 7.0) return '#ea9c6b'; // medium
    if (score < 9.0) return '#ee6c6e'; // high
    return '#c161a1'; // critical
  };

  // Define the button styles for active and inactive states
  const getButtonStyle = (isActive: boolean) => {
    return cn(
      "px-3 py-1 rounded-md text-sm font-medium transition-colors duration-200",
      isActive 
        ? `bg-${getSeverityColor(score).replace('bg-', '')} text-white` 
        : "bg-white text-gray-700 border border-gray-300"
    );
  };

  // Calculate the percentage for the risk chart
  const getRiskPercentage = (score: number): number => {
    return (score / 10) * 100;
  };

  const severityColor = getSeverityColor(score);
  const severityTextColor = getSeverityTextColor(score);
  const severityLevel = getSeverityLevel(score);
  const themeColor = getSeverityThemeColor(score);
  const percentage = getRiskPercentage(score);

  return (
    <div className="space-y-2">
      <div className="rounded-lg  flex items-center justify-between">
        <div className="flex flex-row space-x-6 items-center ">
          <h3 className="text-xl">Base Score</h3>
          <div className={`inline-block px-4 py-2 ${severityColor} text-white font-medium rounded-md`}>
            {score.toFixed(1)} ({severityLevel})
          </div>
        </div>

        <code className="text-sm p-2 block rounded-md break-all">CVSS Vector: {vector}</code>

        
        {/* Enhanced Risk Chart */}
        <div className="relative w-28 h-28">
          <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
            {/* Background circle */}
            <circle 
              cx="50" 
              cy="50" 
              r="45" 
              fill="none" 
              stroke="#e5e7eb" 
              strokeWidth="10" 
            />
            
            {/* Progress circle with animated gradient */}
            <circle 
              cx="50" 
              cy="50" 
              r="45" 
              fill="none" 
              stroke={themeColor}
              strokeWidth="10" 
              strokeDasharray={`${percentage * 2.83} 1000`} 
            />
            
            {/* Text in the center */}
            <g transform="rotate(90, 50, 50)">
              <text 
                x="50%" 
                y="45%" 
                textAnchor="middle" 
                fontSize="18"
                fontWeight="bold"
                fill={themeColor}
              >
                {score.toFixed(1)}
              </text>
              <text 
                x="50%" 
                y="60%" 
                textAnchor="middle" 
                fontSize="12"
                fill={themeColor}
              >
                {severityLevel}
              </text>
            </g>
          </svg>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Left Column - Attack Metrics */}
        <div className="space-y-4">
          <div className="space-y-1">
            <h4 className="text-md">Attack Vector</h4>
            <div className="flex flex-wrap gap-2">
              <button
                className={cn(getButtonStyle(metrics.AV === 'N'))}
                onClick={() => handleMetricChange('AV', 'N')}
                type="button"
              >
                Network
              </button>
              <button
                className={cn(getButtonStyle(metrics.AV === 'A'))}
                onClick={() => handleMetricChange('AV', 'A')}
                type="button"
              >
                Adjacent
              </button>
              <button
                className={cn(getButtonStyle(metrics.AV === 'L'))}
                onClick={() => handleMetricChange('AV', 'L')}
                type="button"
              >
                Local
              </button>
              <button
                className={cn(getButtonStyle(metrics.AV === 'P'))}
                onClick={() => handleMetricChange('AV', 'P')}
                type="button"
              >
                Physical
              </button>
            </div>
          </div>

          <div className="space-y-1">
            <h4 className="text-md">Attack Complexity</h4>
            <div className="flex flex-wrap gap-2">
              <button
                className={cn(getButtonStyle(metrics.AC === 'L'))}
                onClick={() => handleMetricChange('AC', 'L')}
                type="button"
              >
                Low
              </button>
              <button
                className={cn(getButtonStyle(metrics.AC === 'H'))}
                onClick={() => handleMetricChange('AC', 'H')}
                type="button"
              >
                High
              </button>
            </div>
          </div>

          <div className="space-y-1">
            <h4 className="text-md">Privileges Required</h4>
            <div className="flex flex-wrap gap-2">
              <button
                className={cn(getButtonStyle(metrics.PR === 'N'))}
                onClick={() => handleMetricChange('PR', 'N')}
                type="button"
              >
                None
              </button>
              <button
                className={cn(getButtonStyle(metrics.PR === 'L'))}
                onClick={() => handleMetricChange('PR', 'L')}
                type="button"
              >
                Low
              </button>
              <button
                className={cn(getButtonStyle(metrics.PR === 'H'))}
                onClick={() => handleMetricChange('PR', 'H')}
                type="button"
              >
                High
              </button>
            </div>
          </div>

          <div className="space-y-1">
            <h4 className="text-md">User Interaction</h4>
            <div className="flex flex-wrap gap-2">
              <button
                className={cn(getButtonStyle(metrics.UI === 'N'))}
                onClick={() => handleMetricChange('UI', 'N')}
                type="button"
              >
                None
              </button>
              <button
                className={cn(getButtonStyle(metrics.UI === 'R'))}
                onClick={() => handleMetricChange('UI', 'R')}
                type="button"
              >
                Required
              </button>
            </div>
          </div>
        </div>

        {/* Right Column - Impact Metrics */}
        <div className="space-y-4">
          <div className="space-y-1">
            <h4 className="text-md">Scope</h4>
            <div className="flex flex-wrap gap-2">
              <button
                className={cn(getButtonStyle(metrics.S === 'U'))}
                onClick={() => handleMetricChange('S', 'U')}
                type="button"
              >
                Unchanged
              </button>
              <button
                className={cn(getButtonStyle(metrics.S === 'C'))}
                onClick={() => handleMetricChange('S', 'C')}
                type="button"
              >
                Changed
              </button>
            </div>
          </div>

          <div className="space-y-1">
            <h4 className="text-md">Confidentiality</h4>
            <div className="flex flex-wrap gap-2">
              <button
                className={cn(getButtonStyle(metrics.C === 'N'))}
                onClick={() => handleMetricChange('C', 'N')}
                type="button"
              >
                None
              </button>
              <button
                className={cn(getButtonStyle(metrics.C === 'L'))}
                onClick={() => handleMetricChange('C', 'L')}
                type="button"
              >
                Low
              </button>
              <button
                className={cn(getButtonStyle(metrics.C === 'H'))}
                onClick={() => handleMetricChange('C', 'H')}
                type="button"
              >
                High
              </button>
            </div>
          </div>

          <div className="space-y-1">
            <h4 className="text-md">Integrity</h4>
            <div className="flex flex-wrap gap-2">
              <button
                className={cn(getButtonStyle(metrics.I === 'N'))}
                onClick={() => handleMetricChange('I', 'N')}
                type="button"
              >
                None
              </button>
              <button
                className={cn(getButtonStyle(metrics.I === 'L'))}
                onClick={() => handleMetricChange('I', 'L')}
                type="button"
              >
                Low
              </button>
              <button
                className={cn(getButtonStyle(metrics.I === 'H'))}
                onClick={() => handleMetricChange('I', 'H')}
                type="button"
              >
                High
              </button>
            </div>
          </div>

          <div className="space-y-1">
            <h4 className="text-md">Availability</h4>
            <div className="flex flex-wrap gap-2">
              <button
                className={cn(getButtonStyle(metrics.A === 'N'))}
                onClick={() => handleMetricChange('A', 'N')}
                type="button"
              >
                None
              </button>
              <button
                className={cn(getButtonStyle(metrics.A === 'L'))}
                onClick={() => handleMetricChange('A', 'L')}
                type="button"
              >
                Low
              </button>
              <button
                className={cn(getButtonStyle(metrics.A === 'H'))}
                onClick={() => handleMetricChange('A', 'H')}
                type="button"
              >
                High
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CVSSCalculator;
