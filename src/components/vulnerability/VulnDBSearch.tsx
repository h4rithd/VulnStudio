import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { X, Search } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { VulnDBItem, VulnDBSearchProps } from './types/vulnerability.types';
import { useVulnDBSearch } from './hooks/useVulnDBSearch';
import { sanitizeSearchTerm, applyDropdownStyles } from './utils/search-utils';
import SearchResults from './components/SearchResults';
import { useToast } from '@/hooks/use-toast';

const VulnDBSearch: React.FC<VulnDBSearchProps> = ({
  onSelect,
  selectedItem,
  value,
  onChange
}) => {
  const [inputValue, setInputValue] = useState(value || '');
  const { toast } = useToast();
  const resultsContainerRef = useRef<HTMLDivElement>(null);
  const { 
    searchTerm, 
    setSearchTerm, 
    results, 
    loading, 
    showResults, 
    setShowResults,
    error 
  } = useVulnDBSearch();

  // Show error toast if search fails
  useEffect(() => {
    if (error) {
      toast({
        title: 'Search Error',
        description: error,
        variant: 'destructive',
      });
    }
  }, [error, toast]);

  // Update internal state when external value changes
  useEffect(() => {
    if (value !== undefined && value !== inputValue) {
      setInputValue(value);
    }
  }, [value]);

  // Apply dropdown styles whenever results are shown
  useEffect(() => {
    if (showResults) {
      applyDropdownStyles(resultsContainerRef.current);
    }
  }, [showResults, results]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    try {
      const newValue = e.target.value;
      // Sanitize input value to prevent HTML rendering issues
      const sanitizedValue = sanitizeSearchTerm(newValue);
      // const sanitizedValue = newValue;

      setInputValue(sanitizedValue);
      setSearchTerm(sanitizedValue);
      
      if (onChange) {
        onChange(sanitizedValue);
      }
      
      // If the input is cleared, clear the selection too
      if (!sanitizedValue.trim() && selectedItem) {
        onSelect(null);
      }

      // Show results if typing
      if (sanitizedValue.trim().length >= 2) {
        setShowResults(true);
      }
    } catch (error) {
      console.error('[VulnDBSearch] Error handling input change:', error);
    }
  };
  
  const handleItemSelect = (item: VulnDBItem) => {
    try {
      onSelect(item);
      setInputValue(item.title);
      if (onChange) onChange(item.title);
      setShowResults(false);
    } catch (error) {
      console.error('[VulnDBSearch] Error handling item selection:', error);
    }
  };

  const handleBlur = () => {
    // Add a small delay before closing the results
    // to allow for item selection click to register
    setTimeout(() => {
      setShowResults(false);
    }, 300);
  };

  const handleFocus = () => {
    try {
      if (inputValue.trim().length >= 2) {
        setSearchTerm(inputValue); // Re-trigger search on focus
        setShowResults(true);
      }
    } catch (error) {
      console.error('[VulnDBSearch] Error handling focus:', error);
    }
  };

  // Handle clear button click
  const handleClear = () => {
    try {
      onSelect(null);
      setInputValue('');
      if (onChange) onChange('');
      setShowResults(false);
    } catch (error) {
      console.error('[VulnDBSearch] Error clearing selection:', error);
    }
  };

  // Add manual search button
  const handleSearchClick = () => {
    if (inputValue.trim().length >= 2) {
      setSearchTerm(inputValue);
      setShowResults(true);
    }
  };

  return (
    <div className="relative w-full" data-testid="vuln-search-container">
      <div className="flex">
        <div className="relative flex-1">
          <Input
            type="text"
            placeholder="Search for a vulnerability..."
            value={inputValue}
            onChange={handleInputChange}
            onFocus={handleFocus}
            onBlur={handleBlur}
            className="w-full pr-10"
            data-testid="vuln-search-input"
          />
          <Button 
            type="button" 
            variant="ghost" 
            size="sm" 
            onClick={handleSearchClick}
            className="absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 p-0"
          >
            <Search className="h-4 w-4" />
          </Button>
        </div>
        {selectedItem && (
          <Button 
            variant="ghost" 
            size="icon" 
            onClick={handleClear}
            className="shrink-0 ml-2"
            title="Clear selection"
          >
            <X className="h-4 w-4" />
          </Button>
        )}
      </div>
      
      {showResults && (
        <div 
          ref={resultsContainerRef}
          className="absolute z-50 w-full mt-1 bg-background rounded-md shadow-md overflow-hidden border border-border"
          style={{ maxHeight: '300px', overflowY: 'auto' }}
        >
          <SearchResults
            loading={loading}
            results={results}
            selectedItem={selectedItem}
            onItemSelect={handleItemSelect}
          />
        </div>
      )}
    </div>
  );
};

export default VulnDBSearch;