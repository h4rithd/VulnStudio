
import React, { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Plus, Trash2 } from 'lucide-react';

export interface AffectedVersion {
  id?: string;
  name: string;
  detail: string;
}

interface AffectedVersionsTableProps {
  versions: AffectedVersion[];
  onChange: (versions: AffectedVersion[]) => void;
  scopeItems?: any[];
}

const AffectedVersionsTable: React.FC<AffectedVersionsTableProps> = ({ 
  versions, 
  onChange,
  scopeItems = [] 
}) => {
  const [newName, setNewName] = useState('');
  const [newDetail, setNewDetail] = useState('');

  // Memoize the scope processing to prevent infinite loops
  const processScopeItems = useCallback(() => {
    if (scopeItems.length > 0 && versions.length === 0) {
      const newScopeVersions = scopeItems.map((item) => ({
        id: `scope-${Date.now()}-${Math.random().toString(36).substring(2)}`,
        name: 'Deployment',
        detail: item.value || item.name || JSON.stringify(item),
      }));

      onChange(newScopeVersions);
    }
  }, [scopeItems, versions.length, onChange]);

  // Only process scope items once when component mounts or scopeItems change
  React.useEffect(() => {
    processScopeItems();
  }, [scopeItems.length]); // Only depend on length to avoid infinite loops

  const handleAddVersion = () => {
    if (!newName.trim()) return;

    const newVersion: AffectedVersion = {
      id: `temp-${Date.now()}`,
      name: newName.trim(),
      detail: newDetail.trim()
    };

    onChange([...versions, newVersion]);
    setNewName('');
    setNewDetail('');
  };

  const handleRemoveVersion = (index: number) => {
    const newVersions = [...versions];
    newVersions.splice(index, 1);
    onChange(newVersions);
  };

  return (
    <div className="space-y-4">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[300px]">Name</TableHead>
            <TableHead>Detail</TableHead>
            <TableHead className="w-[80px]">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {versions.length === 0 ? (
            <TableRow>
              <TableCell colSpan={3} className="text-center text-muted-foreground py-4">
                No affected versions added
              </TableCell>
            </TableRow>
          ) : (
            versions.map((version, index) => (
              <TableRow key={version.id || index}>
                <TableCell className="font-medium">{version.name}</TableCell>
                <TableCell>{version.detail}</TableCell>
                <TableCell>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleRemoveVersion(index)}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </TableCell>
              </TableRow>
            ))
          )}
        </TableBody>
      </Table>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="name">Name</Label>
          <Input
            id="name"
            placeholder="e.g., Deployment, URL Pattern"
            value={newName}
            onChange={(e) => setNewName(e.target.value)}
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="detail">Detail</Label>
          <Input
            id="detail"
            placeholder="e.g., example.com/api/v1"
            value={newDetail}
            onChange={(e) => setNewDetail(e.target.value)}
          />
        </div>
      </div>

      <Button
        type="button"
        variant="outline"
        size="sm"
        onClick={handleAddVersion}
        disabled={!newName.trim()}
      >
        <Plus className="mr-1 h-4 w-4" />
        Add Row
      </Button>
    </div>
  );
};

export default AffectedVersionsTable;
