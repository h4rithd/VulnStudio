
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { vulnerabilitiesApi } from '@/utils/api';
import { Vulnerability } from '@/types/database.types';
import { Eye, ExternalLink, Shield, Bug, AlertTriangle } from 'lucide-react';
import { getTempVulnerabilities, isTemporaryProject } from '@/utils/tempProjectUtils';

interface VulnerabilityQuickViewProps {
  vulnerabilityId: string | null;
  projectId?: string;
  isOpen: boolean;
  onClose: () => void;
}

export const VulnerabilityQuickView: React.FC<VulnerabilityQuickViewProps> = ({
  vulnerabilityId,
  projectId,
  isOpen,
  onClose,
}) => {
  const [vulnerability, setVulnerability] = useState<Vulnerability | null>(null);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    if (vulnerabilityId && isOpen) {
      fetchVulnerability();
    }
  }, [vulnerabilityId, projectId, isOpen]);

  const fetchVulnerability = async () => {
    if (!vulnerabilityId) return;

    setLoading(true);
    try {
      // Handle temporary project vulnerabilities
      if (projectId && isTemporaryProject(projectId)) {
        const tempVulnerabilities = getTempVulnerabilities(projectId);
        const tempVuln = tempVulnerabilities.find(v => v.id === vulnerabilityId);
        
        if (tempVuln) {
          setVulnerability(tempVuln as Vulnerability);
        } else {
          throw new Error('Temporary vulnerability not found');
        }
      } else {
        // Handle cloud project vulnerabilities
        const result = await vulnerabilitiesApi.getById(vulnerabilityId);
        
        if (!result.success) {
          throw new Error(result.error || 'Failed to fetch vulnerability');
        }

        setVulnerability(result.data);
      }
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message || 'Failed to fetch vulnerability details',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'bg-severity-critical text-white';
      case 'high':
        return 'bg-severity-high text-white';
      case 'medium':
        return 'bg-severity-medium text-white';
      case 'low':
        return 'bg-severity-low text-white';
      case 'info':
        return 'bg-severity-info text-white';
      default:
        return 'bg-gray-600 text-white';
    }
  };

  const renderPocImages = () => {
    if (!vulnerability?.poc_images || vulnerability.poc_images.length === 0) {
      return <p className="text-muted-foreground">No proof of concept images</p>;
    }

    return (
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {vulnerability.poc_images.map((image: any, index: number) => (
          <div key={index} className="border rounded-lg overflow-hidden">
            <img
              src={image.data || image.url}
              alt={image.name || `POC Image ${index + 1}`}
              className="w-full h-48 object-cover"
            />
            {image.name && (
              <div className="p-2 bg-muted">
                <p className="text-sm font-medium">{image.name}</p>
              </div>
            )}
          </div>
        ))}
      </div>
    );
  };

  if (!isOpen) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Eye className="h-5 w-5" />
            Vulnerability Details
          </DialogTitle>
        </DialogHeader>

        {loading ? (
          <div className="flex items-center justify-center py-8">
            <div className="text-muted-foreground">Loading vulnerability details...</div>
          </div>
        ) : vulnerability ? (
          <ScrollArea className="max-h-[70vh]">
            <div className="space-y-6">
              {/* Header Info */}
              <div className="space-y-4">
                <div className="flex items-start gap-4">
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold">{vulnerability.title}</h3>
                    {vulnerability.vulnerability_id && (
                      <p className="text-sm text-muted-foreground font-mono">
                        ID: {vulnerability.vulnerability_id}
                      </p>
                    )}
                  </div>
                  <Badge className={getSeverityColor(vulnerability.severity)}>
                    {vulnerability.severity.toUpperCase()}
                  </Badge>
                </div>

                {/* CVSS Score */}
                <div className="flex items-center gap-4">
                  <div className="flex items-center gap-2">
                    <Shield className="h-4 w-4" />
                    <span className="font-medium">CVSS Score:</span>
                    <Badge variant="outline">{vulnerability.cvss_score}</Badge>
                  </div>
                  {vulnerability.cvss_vector && (
                    <div className="flex items-center gap-2">
                      <span className="text-sm text-muted-foreground">Vector:</span>
                      <code className="text-xs bg-muted px-2 py-1 rounded">
                        {vulnerability.cvss_vector}
                      </code>
                    </div>
                  )}
                </div>
              </div>

              <Separator />

              {/* Background */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Bug className="h-4 w-4" />
                    Background
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="prose prose-sm max-w-none">
                    <div dangerouslySetInnerHTML={{ __html: vulnerability.background }} />
                  </div>
                </CardContent>
              </Card>

              {/* Details */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4" />
                    Technical Details
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="prose prose-sm max-w-none">
                    <div dangerouslySetInnerHTML={{ __html: vulnerability.details }} />
                  </div>
                </CardContent>
              </Card>

              {/* POC Images */}
              <Card>
                <CardHeader>
                  <CardTitle>Proof of Concept</CardTitle>
                </CardHeader>
                <CardContent>
                  {renderPocImages()}
                </CardContent>
              </Card>

              {/* Remediation */}
              <Card>
                <CardHeader>
                  <CardTitle>Remediation</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="prose prose-sm max-w-none">
                    <div dangerouslySetInnerHTML={{ __html: vulnerability.remediation }} />
                  </div>
                </CardContent>
              </Card>

              {/* References */}
              {vulnerability.ref_links && vulnerability.ref_links.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle>References</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {vulnerability.ref_links.map((link: any, index: number) => (
                        <li key={index}>
                          <a
                            href={link.url || link}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-2 text-blue-600 hover:underline"
                          >
                            <ExternalLink className="h-3 w-3" />
                            {link.title || link.url || link}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              )}
            </div>
          </ScrollArea>
        ) : (
          <div className="flex items-center justify-center py-8">
            <div className="text-muted-foreground">Vulnerability not found</div>
          </div>
        )}

        <div className="flex justify-end pt-4">
          <Button onClick={onClose}>Close</Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default VulnerabilityQuickView;
