
import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { useToast } from '@/hooks/use-toast';
import { VulnerabilityFormData } from '../types/vulnerability.types';

export const useVulnerabilityData = (projectId: string, vulnId?: string) => {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState<VulnerabilityFormData | null>(null);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    const fetchVulnerabilityData = async () => {
      if (!vulnId) return;
      
      try {
        setLoading(true);
        setError(null);
        console.log('[useVulnerabilityData] Fetching vulnerability data:', vulnId);
        
        // Check if this is a temporary project vulnerability
        if (projectId.startsWith('temp_')) {
          console.log('[useVulnerabilityData] Loading from localStorage for temporary project');
          // For temporary projects, load from localStorage - Using consistent key format
          const storageKey = `tempVulnerabilities_${projectId}`;
          console.log('[useVulnerabilityData] Storage key being used:', storageKey);
          const vulnsJSON = localStorage.getItem(storageKey);
          console.log('[useVulnerabilityData] Found vulnerabilities in localStorage:', !!vulnsJSON);
          
          if (vulnsJSON) {
            const vulns = JSON.parse(vulnsJSON);
            console.log('[useVulnerabilityData] Number of vulnerabilities in localStorage:', vulns.length);
            console.log('[useVulnerabilityData] Vulnerabilities:', JSON.stringify(vulns));
            
            const vulnerability = vulns.find((v: any) => v.id === vulnId);
            
            if (vulnerability) {
              console.log('[useVulnerabilityData] Found vulnerability in localStorage:', vulnerability.title);
              setFormData(vulnerability as VulnerabilityFormData);
            } else {
              console.error('[useVulnerabilityData] Vulnerability not found in temporary storage');
              setError('Vulnerability not found in temporary storage');
              toast({
                title: 'Error',
                description: 'Vulnerability not found in temporary storage',
                variant: 'destructive',
              });
            }
          } else {
            console.error('[useVulnerabilityData] No vulnerabilities found for this temporary project');
            setError('No vulnerabilities found for this temporary project');
            toast({
              title: 'Error',
              description: 'No vulnerabilities found for this temporary project',
              variant: 'destructive',
            });
          }
        } else {
          // Regular Supabase vulnerability - for cloud-saved projects
          console.log('[useVulnerabilityData] Loading from Supabase for regular project');
          const { data, error } = await supabase
            .from('vulnerabilities')
            .select('*')
            .eq('id', vulnId)
            .single();

          if (error) {
            throw error;
          }

          if (data) {
            console.log('[useVulnerabilityData] Found vulnerability in Supabase:', data.title);
            setFormData(data as VulnerabilityFormData);
          }
        }
      } catch (err: any) {
        console.error('[useVulnerabilityData] Error fetching vulnerability:', err);
        setError(err.message || 'Failed to load vulnerability data');
        toast({
          title: 'Error',
          description: err.message || 'Failed to load vulnerability data',
          variant: 'destructive',
        });
      } finally {
        setLoading(false);
      }
    };

    fetchVulnerabilityData();
  }, [projectId, vulnId, toast]);

  return { loading, formData, error };
};
