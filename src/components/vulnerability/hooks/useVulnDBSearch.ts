
import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { useToast } from '@/hooks/use-toast';
import { VulnDBItem } from '../types/vulnerability.types';
import { sanitizeSearchTerm } from '../utils/search-utils';

interface UseVulnDBSearchReturn {
  searchTerm: string;
  setSearchTerm: React.Dispatch<React.SetStateAction<string>>;
  results: VulnDBItem[];
  loading: boolean;
  handleSearch: (term: string) => Promise<void>;
  showResults: boolean;
  setShowResults: React.Dispatch<React.SetStateAction<boolean>>;
  error: string | null;
}

export const useVulnDBSearch = (): UseVulnDBSearchReturn => {
  const [searchTerm, setSearchTerm] = useState('');
  const [results, setResults] = useState<VulnDBItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  // Debounce search to avoid excessive API calls
  useEffect(() => {
    // Reset error state on new search
    setError(null);
    
    // Clear the results if the search term is less than 2 characters
    if (!searchTerm || searchTerm.trim().length < 2) {
      setResults([]);
      return;
    }
    
    const timer = setTimeout(() => {
      if (searchTerm.trim().length >= 2) {
        handleSearch(searchTerm).catch(error => {
          console.error('[useVulnDBSearch] Search error in useEffect:', error);
        });
      }
    }, 300);

    return () => clearTimeout(timer);
  }, [searchTerm]);

  const handleSearch = async (term: string): Promise<void> => {
    try {
      if (!term || term.length < 2) {
        setResults([]);
        setShowResults(false);
        setError(null);
        return;
      }

      const sanitizedTerm = sanitizeSearchTerm(term);
      if (!sanitizedTerm) {
        setResults([]);
        setShowResults(false);
        setError(null);
        return;
      }

      setLoading(true);
      setError(null);
      
      try {
        const { data, error } = await supabase
          .from('vulndb')
          .select('*')
          .ilike('title', `%${sanitizedTerm}%`)
          .limit(10);

        if (error) {
          setError(error.message);
          throw error;
        }

        // Ensure we have a valid array of results
        const safeData = Array.isArray(data) ? data : [];
        
        // Set results and update showResults state
        setResults(safeData);
        setShowResults(safeData.length > 0); // Only show results if we have some
      } catch (error: any) {
        console.error("[useVulnDBSearch] Error searching VulnDB:", error);
        setError(error.message || 'Failed to search vulnerability templates');
        toast({
          title: 'Error searching VulnDB',
          description: error.message || 'Failed to search vulnerability templates',
          variant: 'destructive',
        });
        setResults([]);
        setShowResults(false);
      } finally {
        setLoading(false);
      }
    } catch (error: any) {
      console.error("[useVulnDBSearch] Unexpected error:", error);
      setError(error.message || 'Unexpected error occurred');
      setResults([]);
      setShowResults(false);
      setLoading(false);
    }
  };

  return {
    searchTerm,
    setSearchTerm,
    results,
    loading,
    handleSearch,
    showResults,
    setShowResults,
    error
  };
};
