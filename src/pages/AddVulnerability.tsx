
import { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import MainLayout from '@/components/layouts/MainLayout';
import { Button } from '@/components/ui/button';
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle, 
  CardDescription 
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { ChevronLeft, Save, X, ImagePlus } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/context/AuthContext';
import CVSSCalculator from '@/components/vulnerability/CVSSCalculator';
import AttachmentUploader from '@/components/vulnerability/AttachmentUploader';
import AffectedVersionsTable, { AffectedVersion } from '@/components/vulnerability/AffectedVersionsTable';
import VulnDBSearch from '@/components/vulnerability/VulnDBSearch';
import { VulnDBItem } from '@/components/vulnerability/types/vulnerability.types';
import { z } from 'zod';
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";

interface Attachment {
  id?: string;
  name: string;
  label: string;
  data: string;
  content_type: string;
  vulnerability_id?: string;
}

// For base64 image storage
interface PocImage {
  name: string;
  data: string; // base64 encoded image
  content_type: string;
  label?: string;
}

const formSchema = z.object({
  title: z.string().min(1, "Title is required"),
  severity: z.string(),
  cvss_score: z.number().min(0).max(10),
  cvss_vector: z.string(),
  background: z.string().optional(),
  details: z.string().min(1, "Technical details are required"),
  remediation: z.string().min(1, "Remediation steps are required"),
  ref_links: z.array(z.string()).default([]),
  request_response: z.any().default({}),
  affected_versions: z.array(z.any()).default([]),
  poc_images: z.array(z.any()).default([]),
  vulnerability_id: z.string().optional(),
  current_status: z.boolean().optional(),
  retest_date: z.string().optional(),
  retest_result: z.string().optional(),
  retest_images: z.array(z.any()).default([])
});

type FormValues = z.infer<typeof formSchema>;

const AddVulnerability = () => {
  console.log('[AddVulnerability] Component rendering');
  
  const { projectId, vulnId } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const { user } = useAuth();
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [projectData, setProjectData] = useState<any>(null);
  const [attachments, setAttachments] = useState<Attachment[]>([]);
  const [existingAttachments, setExistingAttachments] = useState<Attachment[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<VulnDBItem | null>(null);
  const [refLink, setRefLink] = useState('');
  const [refLinks, setRefLinks] = useState<string[]>([]);
  const [requestResponseData, setRequestResponseData] = useState({
    request: '',
    response: ''
  });
  const [pocImages, setPocImages] = useState<PocImage[]>([]);
  const [retestImages, setRetestImages] = useState<PocImage[]>([]);
  const [isAutoGeneratingId, setIsAutoGeneratingId] = useState(true);
  
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: '',
      severity: 'medium',
      cvss_score: 5.0,
      cvss_vector: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L',
      background: '',
      details: '',
      remediation: '',
      ref_links: [],
      request_response: {},
      affected_versions: [],
      poc_images: [],
      vulnerability_id: '',
      current_status: false,
      retest_date: new Date().toISOString().split('T')[0],
      retest_result: '',
      retest_images: []
    }
  });

  useEffect(() => {
    console.log('[AddVulnerability] Component mounted or project/vuln ID changed:', { projectId, vulnId });
    
    // Fetch project data for scope items
    const fetchProjectData = async () => {
      if (!projectId) return;

      try {
        console.log('[AddVulnerability] Fetching project data');
        
        const { data, error } = await supabase
          .from('reports')
          .select('*')
          .eq('id', projectId)
          .single();

        if (error) throw error;
        
        console.log('[AddVulnerability] Project data loaded:', data?.title);
        setProjectData(data);
      } catch (error: any) {
        console.error('[AddVulnerability] Failed to load project data:', error);
        toast({
          title: 'Error',
          description: error.message || 'Failed to load project data',
          variant: 'destructive',
        });
      }
    };
    
    fetchProjectData();
    
    // Check if we're editing an existing vulnerability
    if (vulnId) {
      console.log('[AddVulnerability] Editing mode activated for vulnerability:', vulnId);
      setIsEditing(true);
      fetchVulnerabilityData(vulnId);
    }
  }, [vulnId, projectId]);

  const fetchVulnerabilityData = async (id: string) => {
    try {
      console.log('[AddVulnerability] Fetching vulnerability data for:', id);
      setLoading(true);
      
      // Fetch vulnerability data
      const { data: vulnData, error: vulnError } = await supabase
        .from('vulnerabilities')
        .select('*')
        .eq('id', id)
        .single();

      if (vulnError) throw vulnError;
      
      if (vulnData) {
        console.log('[AddVulnerability] Vulnerability data loaded:', vulnData.title);
        
        // Check if vulnerability has a custom ID
        if (vulnData.vulnerability_id) {
          setIsAutoGeneratingId(false);
        }
        
        form.reset({
          title: vulnData.title || '',
          severity: vulnData.severity || 'medium',
          cvss_score: vulnData.cvss_score || 5.0,
          cvss_vector: vulnData.cvss_vector || 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L',
          background: vulnData.background || '',
          details: vulnData.details || '',
          remediation: vulnData.remediation || '',
          ref_links: Array.isArray(vulnData.ref_links) ? vulnData.ref_links : [],
          request_response: vulnData.request_response || {},
          affected_versions: vulnData.affected_versions || [],
          poc_images: vulnData.poc_images || [],
          vulnerability_id: vulnData.vulnerability_id || '',
          current_status: vulnData.current_status || false,
          retest_date: vulnData.retest_date 
            ? new Date(vulnData.retest_date).toISOString().split('T')[0] 
            : new Date().toISOString().split('T')[0],
          retest_result: vulnData.retest_result || '',
          retest_images: vulnData.retest_images || []
        });
        
        setRefLinks(Array.isArray(vulnData.ref_links) ? vulnData.ref_links : []);
        setPocImages(Array.isArray(vulnData.poc_images) ? vulnData.poc_images : []);
        setRetestImages(Array.isArray(vulnData.retest_images) ? vulnData.retest_images : []);
        
        if (vulnData.request_response && vulnData.request_response.request) {
          setRequestResponseData({
            request: vulnData.request_response.request || '',
            response: vulnData.request_response.response || ''
          });
        }
        
        // Fetch attachments
        const { data: attachmentData, error: attachmentError } = await supabase
          .from('attachments')
          .select('*')
          .eq('vulnerability_id', id);

        if (attachmentError) throw attachmentError;
        
        if (attachmentData && attachmentData.length > 0) {
          console.log('[AddVulnerability] Loaded', attachmentData.length, 'attachments');
          setExistingAttachments(attachmentData);
        }
      }
    } catch (error: any) {
      console.error('[AddVulnerability] Failed to load vulnerability data:', error);
      toast({
        title: 'Error',
        description: error.message || 'Failed to load vulnerability data',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  // Function to toggle between auto-generating and manually entering vulnerability ID
  const toggleIdGeneration = () => {
    setIsAutoGeneratingId(!isAutoGeneratingId);
    if (isAutoGeneratingId) {
      // If switching to manual entry and there's no current ID, clear it
      form.setValue('vulnerability_id', '');
    }
  };

  const handleTemplateSelect = (template: VulnDBItem | null) => {
    console.log('[AddVulnerability] Template selected:', template?.title);
    setSelectedTemplate(template);
    
    if (template) {
      // Fill form with template data
      form.setValue('title', template.title);
      form.setValue('background', template.background || '');
      form.setValue('details', template.details || '');
      form.setValue('remediation', template.remediation || '');
      
      // Set reference links if they exist
      const templateRefLinks = Array.isArray(template.ref_links) ? template.ref_links : [];
      setRefLinks(templateRefLinks);
      form.setValue('ref_links', templateRefLinks);
    }
  };

  const handleAddRefLink = () => {
    if (refLink.trim() && !refLinks.includes(refLink)) {
      console.log('[AddVulnerability] Adding ref link:', refLink);
      const newRefLinks = [...refLinks, refLink];
      setRefLinks(newRefLinks);
      form.setValue('ref_links', newRefLinks);
      setRefLink('');
    }
  };

  const handleRemoveRefLink = (index: number) => {
    console.log('[AddVulnerability] Removing ref link at index:', index);
    const newRefLinks = [...refLinks];
    newRefLinks.splice(index, 1);
    setRefLinks(newRefLinks);
    form.setValue('ref_links', newRefLinks);
  };

  const handleCVSSChange = (vector: string, score: number) => {
    console.log('[AddVulnerability] CVSS updated:', { vector, score });
    form.setValue('cvss_vector', vector);
    form.setValue('cvss_score', score);
    
    // Update severity based on CVSS score
    let severity = 'info';
    if (score >= 9.0) severity = 'critical';
    else if (score >= 7.0) severity = 'high';
    else if (score >= 4.0) severity = 'medium';
    else if (score > 0.0) severity = 'low';
    
    console.log('[AddVulnerability] Setting severity based on CVSS:', severity);
    form.setValue('severity', severity);
  };

  const handleAffectedVersionsChange = (versions: AffectedVersion[]) => {
    console.log('[AddVulnerability] Affected versions updated:', versions.length);
    form.setValue('affected_versions', versions);
  };
  
  // Function to handle image uploads with better error handling
  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>, setImages: (callback: (prev: PocImage[]) => PocImage[]) => void, formField: 'poc_images' | 'retest_images') => {
    const files = event.target.files;
    if (!files || files.length === 0) return;
    
    console.log('[AddVulnerability] Processing', files.length, 'uploaded images');
    
    // Process each file
    Array.from(files).forEach(file => {
      if (!file.type.startsWith('image/')) {
        console.error('[AddVulnerability] Invalid file type:', file.type);
        toast({
          title: 'Invalid file type',
          description: 'Only image files are allowed',
          variant: 'destructive',
        });
        return;
      }
      
      const reader = new FileReader();
      reader.onload = (e) => {
        if (!e.target?.result) return;
        
        const newImage: PocImage = {
          name: file.name,
          data: e.target.result as string,
          content_type: file.type
        };
        
        console.log('[AddVulnerability] Image loaded:', file.name);
        setImages(prev => {
          const updatedImages = [...prev, newImage];
          form.setValue(formField, updatedImages);
          return updatedImages;
        });

        // Confirmation toast
        toast({
          title: 'Image added',
          description: `${file.name} has been added successfully`,
        });
      };
      
      reader.readAsDataURL(file);
    });
    
    // Clear the input value so the same file can be selected again
    event.target.value = '';
  };

  // Add a function to handle paste events directly
  const handlePasteImage = (event: React.ClipboardEvent, setImages: (callback: (prev: PocImage[]) => PocImage[]) => void, formField: 'poc_images' | 'retest_images') => {
    const items = event.clipboardData?.items;
    if (!items) return;

    console.log('[AddVulnerability] Processing pasted content, items:', items.length);

    for (let i = 0; i < items.length; i++) {
      if (items[i].type.indexOf('image') !== -1) {
        const file = items[i].getAsFile();
        if (!file) continue;
        
        console.log('[AddVulnerability] Image found in clipboard:', file.type);
        
        const reader = new FileReader();
        reader.onload = (e) => {
          if (!e.target?.result) return;
          
          const newImage: PocImage = {
            name: `pasted-image-${Date.now()}.png`,
            data: e.target.result as string,
            content_type: file.type
          };
          
          console.log('[AddVulnerability] Pasted image processed');
          setImages(prev => {
            const updatedImages = [...prev, newImage];
            form.setValue(formField, updatedImages);
            return updatedImages;
          });

          toast({
            title: 'Image pasted',
            description: 'Image from clipboard has been added successfully',
          });
        };
        
        reader.readAsDataURL(file);
      }
    }
  };

  // Function to remove an uploaded image
  const handleRemoveImage = (index: number, setImages: (callback: (prev: PocImage[]) => PocImage[]) => void, formField: 'poc_images' | 'retest_images') => {
    console.log('[AddVulnerability] Removing image at index:', index);
    setImages(prev => {
      const updatedImages = [...prev];
      updatedImages.splice(index, 1);
      form.setValue(formField, updatedImages);
      return updatedImages;
    });
  };

  const onSubmit = async (data: FormValues) => {
    console.log('[AddVulnerability] Form submitted:', data);
    
    if (!projectId || !user) {
      console.error('[AddVulnerability] Missing project or user information');
      toast({
        title: 'Error',
        description: 'Missing project information',
        variant: 'destructive',
      });
      return;
    }
    
    try {
      setLoading(true);
      
      // Prepare request/response data
      const finalRequestResponse = {
        request: requestResponseData.request || '',
        response: requestResponseData.response || ''
      };
      
      // Prepare vulnerability data
      const vulnerabilityData = {
        ...data,
        report_id: projectId,
        created_by: user.id,
        request_response: finalRequestResponse,
        poc_images: pocImages,
        retest_images: retestImages
      };
      
      // If user opted for auto-generation of ID, don't include the vulnerability_id field
      if (isAutoGeneratingId) {
        delete vulnerabilityData.vulnerability_id;
      }
      
      console.log('[AddVulnerability] Saving vulnerability data');
      
      let vulnerabilityId: string;
      
      // Insert or update vulnerability
      if (isEditing && vulnId) {
        console.log('[AddVulnerability] Updating existing vulnerability:', vulnId);
        const { error } = await supabase
          .from('vulnerabilities')
          .update(vulnerabilityData)
          .eq('id', vulnId);
        
        if (error) throw error;
        vulnerabilityId = vulnId;
        
        console.log('[AddVulnerability] Vulnerability updated successfully');
        toast({
          title: 'Success',
          description: 'Vulnerability updated successfully',
        });
      } else {
        console.log('[AddVulnerability] Creating new vulnerability');
        const { data: newVuln, error } = await supabase
          .from('vulnerabilities')
          .insert([vulnerabilityData])
          .select();
        
        if (error) throw error;
        if (!newVuln || newVuln.length === 0) throw new Error('Failed to create vulnerability');
        
        vulnerabilityId = newVuln[0].id;
        console.log('[AddVulnerability] New vulnerability created:', vulnerabilityId);
        
        toast({
          title: 'Success',
          description: 'Vulnerability added successfully',
        });
      }
      
      // Handle attachments
      const newAttachments = attachments.filter(att => !att.id);
      if (newAttachments.length > 0) {
        console.log('[AddVulnerability] Saving', newAttachments.length, 'new attachments');
        const attachmentsToInsert = newAttachments.map(att => ({
          vulnerability_id: vulnerabilityId,
          name: att.name,
          label: att.label,
          data: att.data,
          content_type: att.content_type,
          created_by: user.id
        }));
        
        const { error: attachmentError } = await supabase
          .from('attachments')
          .insert(attachmentsToInsert);
        
        if (attachmentError) throw attachmentError;
        console.log('[AddVulnerability] Attachments saved successfully');
      }
      
      navigate(`/projects/${projectId}`);
    } catch (error: any) {
      console.error('[AddVulnerability] Error saving vulnerability:', error);
      toast({
        title: 'Error',
        description: error.message || 'Failed to save vulnerability',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  if (loading && isEditing) {
    return (
      <MainLayout>
        <div className="flex items-center justify-center min-h-[50vh]">
          <div className="animate-spin h-10 w-10 border-4 border-secondary border-t-transparent rounded-full"></div>
        </div>
      </MainLayout>
    );
  }

  const isResolved = form.watch('current_status');

  return (
    <MainLayout>
      <div className="flex items-center gap-2 mb-6">
        <Button asChild variant="ghost" size="sm">
          <Link to={`/projects/${projectId}`}>
            <ChevronLeft className="h-4 w-4 mr-1" />
            Back to Project
          </Link>
        </Button>
      </div>
      
      <h1 className="text-3xl font-bold mb-6">
        {isEditing ? 'Edit Vulnerability' : 'Add New Vulnerability'}
      </h1>
      
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>Basic Information</CardTitle>
              <CardDescription>
                Add basic details about the vulnerability or select from existing templates
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-4">
                <FormField
                  control={form.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Vulnerability Name</FormLabel>
                      <FormControl>
                        <VulnDBSearch 
                          onSelect={handleTemplateSelect}
                          selectedItem={selectedTemplate}
                          value={field.value}
                          onChange={field.onChange}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="vulnerability_id">Vulnerability ID</Label>
                    <Button 
                      type="button" 
                      variant="outline" 
                      size="sm" 
                      onClick={toggleIdGeneration}
                    >
                      {isAutoGeneratingId ? 'Enter Manually' : 'Auto-Generate'}
                    </Button>
                  </div>
                  {isAutoGeneratingId ? (
                    <div className="text-sm text-muted-foreground">
                      ID will be auto-generated based on project name, severity, and order.
                    </div>
                  ) : (
                    <FormField
                      control={form.control}
                      name="vulnerability_id"
                      render={({ field }) => (
                        <FormItem>
                          <FormControl>
                            <Input 
                              placeholder="e.g., PRJ.H.01" 
                              {...field}
                              className="font-mono"
                            />
                          </FormControl>
                          <FormMessage />
                          <p className="text-xs text-muted-foreground">
                            Format: [Project Prefix].[Severity Letter].[Number]
                          </p>
                        </FormItem>
                      )}
                    />
                  )}
                </div>

                {isEditing && (
                  <FormField
                    control={form.control}
                    name="current_status"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-center space-x-3 space-y-0 border p-4 rounded-md">
                        <FormControl>
                          <input
                            type="checkbox"
                            className="h-4 w-4"
                            checked={field.value}
                            onChange={field.onChange}
                          />
                        </FormControl>
                        <div className="space-y-1 leading-none">
                          <FormLabel>
                            {field.value ? 'Issue Resolved' : 'Mark Issue as Resolved'}
                          </FormLabel>
                          <p className="text-sm text-muted-foreground">
                            {field.value 
                              ? 'This vulnerability has been marked as resolved'
                              : 'Mark this vulnerability as resolved when it has been fixed'
                            }
                          </p>
                        </div>
                      </FormItem>
                    )}
                  />
                )}
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Background Information</CardTitle>
              <CardDescription>
                Provide context about the vulnerability
              </CardDescription>
            </CardHeader>
            <CardContent>
              <FormField
                control={form.control}
                name="background"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Issue Background</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Provide context and background information"
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Affected Versions</CardTitle>
              <CardDescription>
                Specify what versions or components are affected
              </CardDescription>
            </CardHeader>
            <CardContent>
              <FormField
                control={form.control}
                name="affected_versions"
                render={({ field }) => (
                  <FormItem>
                    <AffectedVersionsTable
                      versions={field.value}
                      onChange={handleAffectedVersionsChange}
                      scopeItems={projectData?.scope || []}
                    />
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Technical Details</CardTitle>
              <CardDescription>
                Provide detailed technical information about the vulnerability
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <FormField
                control={form.control}
                name="details"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Issue Details</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Explain the technical aspects of the vulnerability"
                        className="min-h-[150px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div className="space-y-2">
                <Label>Proof of Concept (PoC) Images</Label>
                
                {pocImages.length > 0 && (
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-4">
                    {pocImages.map((img, index) => (
                      <div key={index} className="relative">
                        <img 
                          src={img.data} 
                          id="poc-image-upload" 
                          alt={`PoC ${index + 1}`} 
                          className="h-32 w-full object-cover rounded-md"
                        />
                        <Button
                          type="button"
                          variant="destructive"
                          size="sm"
                          className="absolute top-1 right-1 h-6 w-6 p-0"
                          onClick={() => handleRemoveImage(index, setPocImages, 'poc_images')}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                )}

                {/* <div className="flex gap-2 mt-2">
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => document.getElementById('poc-image-upload')?.click()}
                  >
                    <ImagePlus className="h-4 w-4 mr-2" />
                    Upload Image
                  </Button>
                  <input
                    id="poc-image-upload"
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleImageUpload(e, setPocImages, 'poc_images')}
                    multiple
                    className="hidden"
                  />
                  <div className="text-sm text-muted-foreground mt-1">
                    Paste images (Ctrl+V) in this area to upload
                  </div>
                </div> */}
                <div 
                  className="border-2 border-dashed border-muted p-6 rounded-md text-center cursor-pointer mt-2" 
                  onPaste={(e) => handlePasteImage(e, setPocImages, 'poc_images')}
                  tabIndex={0}
                >
                  <p className="text-muted-foreground text-sm">
                    Click to focus, then paste images from clipboard (Ctrl+V)
                  </p>
                </div>
              </div>
              
              <AttachmentUploader
                attachments={[...existingAttachments, ...attachments]}
                onChange={setAttachments}
              />
              
              <div className="space-y-2">
                <Label>Request / Response</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    {/* <Label htmlFor="request" className="text-sm text-muted-foreground">
                      HTTP Request
                    </Label> */}
                    <Textarea
                      id="request"
                      placeholder="HTTP request details"
                      className="font-mono text-sm h-[150px]"
                      value={requestResponseData.request}
                      onChange={(e) => setRequestResponseData({
                        ...requestResponseData,
                        request: e.target.value
                      })}
                    />
                  </div>
                  <div className="space-y-2">
                    {/* <Label htmlFor="response" className="text-sm text-muted-foreground">
                      HTTP Response
                    </Label> */}
                    <Textarea
                      id="response"
                      placeholder="HTTP response details"
                      className="font-mono text-sm h-[150px]"
                      value={requestResponseData.response}
                      onChange={(e) => setRequestResponseData({
                        ...requestResponseData,
                        response: e.target.value
                      })}
                    />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Remediation</CardTitle>
              {/* <CardDescription>
                Recommend steps to fix the vulnerability
              </CardDescription> */}
            </CardHeader>
            <CardContent>
              <FormField
                control={form.control}
                name="remediation"
                render={({ field }) => (
                  <FormItem>
                    <FormControl>
                      <Textarea
                        placeholder="Recommend steps to fix the vulnerability"
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Risk Analysis</CardTitle>
              <CardDescription>
                Calculate the risk score for this vulnerability
              </CardDescription>
            </CardHeader>
            <CardContent>
              <CVSSCalculator
                initialVector={form.getValues('cvss_vector')}
                initialScore={form.getValues('cvss_score')}
                onVectorChange={handleCVSSChange}
              />
            </CardContent>
          </Card>
          
          {/* Re-Test Results Section (only show when vulnerability is marked as resolved) */}
          {isResolved && (
            <Card>
              <CardHeader>
                <CardTitle>Re-Test Results</CardTitle>
                <CardDescription>
                  Document the verification that the vulnerability has been resolved
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <FormField
                  control={form.control}
                  name="retest_date"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Re-Test Date</FormLabel>
                      <FormControl>
                        <Input type="date" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="retest_result"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Verification Details</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Explain how you verified that the issue has been fixed"
                          className="min-h-[100px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <div className="space-y-2">
                  <Label>Re-Test Evidence</Label>
                  
                  {retestImages.length > 0 && (
                    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-4">
                      {retestImages.map((img, index) => (
                        <div key={index} className="relative">
                          <img 
                            src={img.data} 
                            id="retest-image-upload" 
                            alt={`Re-Test ${index + 1}`} 
                            className="h-32 w-full object-cover rounded-md"
                          />
                          <Button
                            type="button"
                            variant="destructive"
                            size="sm"
                            className="absolute top-1 right-1 h-6 w-6 p-0"
                            onClick={() => handleRemoveImage(index, setRetestImages, 'retest_images')}
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}

                  <div className="flex gap-2 mt-2">
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => document.getElementById('retest-image-upload')?.click()}
                    >
                      <ImagePlus className="h-4 w-4 mr-2" />
                      Upload Evidence Image
                    </Button>
                    <input
                      id="retest-image-upload"
                      type="file"
                      accept="image/*"
                      onChange={(e) => handleImageUpload(e, setRetestImages, 'retest_images')}
                      multiple
                      className="hidden"
                    />
                    <div className="text-sm text-muted-foreground mt-1">
                      Paste images (Ctrl+V) in this area to upload
                    </div>
                  </div>
                  <div 
                    className="border-2 border-dashed border-muted p-6 rounded-md text-center cursor-pointer mt-2" 
                    onPaste={(e) => handlePasteImage(e, setRetestImages, 'retest_images')}
                    tabIndex={0}
                  >
                    <p className="text-muted-foreground text-sm">
                      Click to focus, then paste images from clipboard (Ctrl+V)
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
          
          <Card>
            <CardHeader>
              <CardTitle>Related Links</CardTitle>
              <CardDescription>
                Add references and external resources
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex gap-2">
                  <Input
                    placeholder="https://h4rithd.com/reference"
                    value={refLink}
                    onChange={(e) => setRefLink(e.target.value)}
                    className="flex-1"
                  />
                  <Button 
                    type="button" 
                    onClick={handleAddRefLink} 
                    disabled={!refLink.trim() || refLinks.includes(refLink)}
                  >
                    Add
                  </Button>
                </div>
                
                {refLinks.length > 0 && (
                  <ul className="space-y-2">
                    {refLinks.map((link, i) => (
                      <li key={i} className="flex items-center justify-between bg-muted p-2 rounded-md">
                        <span className="text-sm truncate mr-2">{link}</span>
                        <Button 
                          type="button" 
                          variant="ghost" 
                          size="sm" 
                          onClick={() => handleRemoveRefLink(i)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </CardContent>
          </Card>
          
          <div className="flex justify-end gap-4">
            <Button 
              type="button" 
              variant="outline" 
              onClick={() => navigate(`/projects/${projectId}`)}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? (
                <>
                  <div className="animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full mr-2"></div>
                  {isEditing ? 'Updating...' : 'Saving...'}
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  {isEditing ? 'Update Vulnerability' : 'Save Vulnerability'}
                </>
              )}
            </Button>
          </div>
        </form>
      </Form>
    </MainLayout>
  );
};

export default AddVulnerability;
