
import { useState } from 'react';
import { Vulnerability } from '@/types/database.types';
import { vulnerabilitiesApi } from '@/utils/api';
import { useToast } from '@/hooks/use-toast';
import { getTempVulnerabilities, isTemporaryProject } from '@/utils/tempProjectUtils';

export const useVulnerabilityQuickView = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [vulnerability, setVulnerability] = useState<Vulnerability | null>(null);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const openQuickView = async (vulnerabilityId: string, projectId?: string) => {
    setLoading(true);
    setIsOpen(true);

    try {
      // Handle temporary project vulnerabilities
      if (projectId && isTemporaryProject(projectId)) {
        const tempVulnerabilities = getTempVulnerabilities(projectId);
        const tempVuln = tempVulnerabilities.find(v => v.id === vulnerabilityId);
        
        if (tempVuln) {
          setVulnerability(tempVuln as Vulnerability);
        } else {
          throw new Error('Temporary vulnerability not found');
        }
      } else {
        // Handle cloud project vulnerabilities
        const result = await vulnerabilitiesApi.getById(vulnerabilityId);
        
        if (!result.success) {
          throw new Error(result.error || 'Failed to fetch vulnerability');
        }

        setVulnerability(result.data);
      }
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message || 'Failed to fetch vulnerability details',
        variant: 'destructive',
      });
      setIsOpen(false);
    } finally {
      setLoading(false);
    }
  };

  const closeQuickView = () => {
    setIsOpen(false);
    setVulnerability(null);
  };

  return {
    isOpen,
    vulnerability,
    loading,
    openQuickView,
    closeQuickView
  };
};
